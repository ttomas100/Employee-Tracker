"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.printSimpleTable = exports.renderSimpleTable = exports.renderTable = void 0;
const colored_console_line_1 = __importDefault(require("../utils/colored-console-line"));
const table_constants_1 = require("../utils/table-constants");
const table_helpers_1 = require("../utils/table-helpers");
const internal_table_1 = require("./internal-table");
const table_pre_processors_1 = require("./table-pre-processors");
function renderLine(tableStyle, columns, row, isHeader) {
    const line = new colored_console_line_1.default();
    line.addWithColor(table_constants_1.defaultRowFontColor, tableStyle.vertical);
    columns.forEach((column) => {
        line.addWithColor(table_constants_1.defaultRowFontColor, ' ');
        line.addWithColor((isHeader && table_constants_1.defaultHeaderFontColor) || column.color || row.color, // column color is prioritized as row color
        table_helpers_1.textWithPadding(`${table_helpers_1.cellText(row.text[column.name])}`, column.alignment || table_constants_1.defaultRowAlignment, column.max_ln || 20));
        line.addWithColor(table_constants_1.defaultRowFontColor, ` ${tableStyle.vertical}`);
    });
    return line.renderConsole();
}
// ║ 1     ║     I would like some red wine please ║ 10.212 ║
function renderRow(table, row) {
    const ret = [];
    ret.push(renderLine(table.tableStyle, table.columns, row));
    return ret;
}
/*
                  The analysis Result
 ╔═══════╦═══════════════════════════════════════╦════════╗
*/
function renderTableTitle(table) {
    const ret = [];
    if (table.title === undefined) {
        return ret;
    }
    const getTableWidth = () => {
        const reducer = (accumulator, currentValue) => 
        // ║ cell ║, 2 spaces + cellTextSize + one border on the left
        accumulator + currentValue + 2 + 1;
        return table.columns.map((m) => m.max_ln || 20).reduce(reducer, 1);
    };
    const titleWithPadding = table_helpers_1.textWithPadding(table.title, table_constants_1.defaultHeaderAlignment, getTableWidth());
    const styledText = new colored_console_line_1.default();
    styledText.addWithColor(table_constants_1.defaultHeaderFontColor, titleWithPadding);
    //                  The analysis Result
    ret.push(styledText.renderConsole());
    return ret;
}
/*
 ╔═══════╦═══════════════════════════════════════╦════════╗
 ║ index ║                                  text ║  value ║
 ╟═══════╬═══════════════════════════════════════╬════════╢
*/
function renderTableHeaders(table) {
    const ret = [];
    // ╔═══════╦═══════════════════════════════════════╦════════╗
    ret.push(table_helpers_1.renderTableHorizontalBorders(table.tableStyle.headerTop, table.columns.map((m) => m.max_ln || 20)));
    // ║ index ║                                  text ║  value ║
    const row = table_helpers_1.createHeaderAsRow(table_helpers_1.createRow, table.columns);
    ret.push(renderLine(table.tableStyle, table.columns, row, true));
    // ╟═══════╬═══════════════════════════════════════╬════════╢
    ret.push(table_helpers_1.renderTableHorizontalBorders(table.tableStyle.headerBottom, table.columns.map((m) => m.max_ln || 20)));
    return ret;
}
function renderTableEnding(table) {
    const ret = [];
    // ╚═══════╩═══════════════════════════════════════╩════════╝
    ret.push(table_helpers_1.renderTableHorizontalBorders(table.tableStyle.tableBottom, table.columns.map((m) => m.max_ln || 20)));
    return ret;
}
function renderTable(table) {
    table_pre_processors_1.preProcessColumns(table); // enable / disable cols, find maxLn of each col/ computed Columns
    table_pre_processors_1.preProcessRows(table); // sort and filter
    const ret = [];
    renderTableTitle(table).forEach((row) => ret.push(row));
    renderTableHeaders(table).forEach((row) => ret.push(row));
    table.rows.forEach((row) => {
        renderRow(table, row).forEach((row_) => ret.push(row_));
    });
    renderTableEnding(table).forEach((row) => ret.push(row));
    return ret.join('\n');
}
exports.renderTable = renderTable;
function renderSimpleTable(rows) {
    const table = new internal_table_1.TableInternal();
    table.addRows(rows);
    return renderTable(table);
}
exports.renderSimpleTable = renderSimpleTable;
function printSimpleTable(rows) {
    console.log(renderSimpleTable(rows));
}
exports.printSimpleTable = printSimpleTable;
