import { Dictionary } from '../models/common';
import { Column, Row } from '../models/internal-table';
import { ALIGNMENT, COLOR, TABLE_STYLE_DETAILS } from '../utils/table-constants';
import { RowOptions } from '../utils/table-helpers';
interface ColumnOptionsRaw {
    name: string;
    title?: string;
    alignment?: ALIGNMENT;
    color?: COLOR;
}
export interface ComputedColumn extends ColumnOptionsRaw {
    function: (arg0: any) => any;
}
export declare type RowSortFunction = (row1: any, row2: any) => number;
export declare type RowFilterFunction = (row: any) => Boolean;
export interface ComplexOptions {
    style?: TABLE_STYLE_DETAILS;
    title?: string;
    columns?: ColumnOptionsRaw[];
    sort?: RowSortFunction;
    filter?: RowFilterFunction;
    enabledColumns?: string[];
    disabledColumns?: string[];
    computedColumns?: ComputedColumn[];
}
export declare class TableInternal {
    title?: string;
    tableStyle: TABLE_STYLE_DETAILS;
    columns: Column[];
    rows: Row[];
    filterFunction: RowFilterFunction;
    sortFunction: RowSortFunction;
    enabledColumns: string[];
    disabledColumns: string[];
    computedColumns: any[];
    initSimple(columns: string[]): void;
    initDetailed(options: ComplexOptions): void;
    constructor(options?: ComplexOptions | string[]);
    createColumnFromRow(text: Dictionary): void;
    addColumn(text: string): void;
    addColumns(toBeInsertedColumns: string[]): void;
    addRow(text: Dictionary, options?: RowOptions): void;
    addRows(toBeInsertedRows: Dictionary[], options?: RowOptions): void;
    renderTable(): string;
}
export {};
