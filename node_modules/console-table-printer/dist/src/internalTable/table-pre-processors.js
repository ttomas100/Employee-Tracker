"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.preProcessRows = exports.preProcessColumns = void 0;
const table_helpers_1 = require("../utils/table-helpers");
function createComputedColumnsIfNecessary(table) {
    if (table.computedColumns.length) {
        table.computedColumns.forEach((computedColumn) => {
            table.addColumn(computedColumn.name);
            table.rows.forEach((row) => {
                row.text[computedColumn.name] = computedColumn.function(row.text);
            });
        });
    }
}
function disableColumnsIfNecessary(table) {
    if (table.enabledColumns.length) {
        table.columns = table.columns.filter((col) => table.enabledColumns.includes(col.name));
    }
}
function enableColumnsIfNecessary(table) {
    if (table.disabledColumns.length) {
        table.columns = table.columns.filter((col) => !table.disabledColumns.includes(col.name));
    }
}
function findMaxColumnLength(table) {
    table.columns.forEach((column) => {
        column.max_ln = table_helpers_1.findMaxLenOfColumn(column, table.rows);
    });
}
function preProcessColumns(table) {
    createComputedColumnsIfNecessary(table);
    enableColumnsIfNecessary(table);
    disableColumnsIfNecessary(table);
    findMaxColumnLength(table);
}
exports.preProcessColumns = preProcessColumns;
function preProcessRows(table) {
    const newRows = table.rows
        .filter((r) => table.filterFunction(r.text))
        .sort((r1, r2) => table.sortFunction(r1.text, r2.text));
    table.rows = newRows;
}
exports.preProcessRows = preProcessRows;
